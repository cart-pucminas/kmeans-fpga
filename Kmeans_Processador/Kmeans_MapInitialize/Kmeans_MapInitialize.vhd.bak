library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE ieee.std_logic_unsigned.all ;
use ieee.numeric_std.all;
use ieee.math_real.all; 

Entity Kmeans_MapInitialize is
    GENERIC ( TamanhoAddr : INTEGER := 15; 
			  Palavra     : INTEGER := 64;
			  --MaxPontos   : INTEGER := 32256;
			  --MaxCentroids: INTEGER := 1024;
			  MaxCentroidsBits : INTEGER := 10;
			  MaxPontosBits : INTEGER := 14;
			  NumBitsStates: INTEGER := 4); 
				  
	 PORT (
      clk          	  : in STD_LOGIC;									   --Sinal de Clock
	  nrst			  : in STD_LOGIC;									   --Reset do bloco
	  reg1			  : in STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0);  --Numero de centroids
	  reg3			  : in STD_LOGIC_VECTOR(MaxPontosBits-1 downto 0);     --Numero de pontos
	  reg6 		      : in STD_LOGIC_VECTOR(TamanhoAddr-1 downto 0);       --Endereco para salvar os mapeamentos calculados
	  count_Map  	  : in STD_LOGIC_VECTOR(MaxPontosBits-1 downto 0);     --Quantidade de dados inicializados no mapeamento
	  count_Centroid  : in STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0);  --Quantidade de centroids contados
	  en_MapInitialize: in STD_LOGIC;									   --Habilita o bloco								
	  o_count_Map	  : out STD_LOGIC_VECTOR(MaxPontosBits-1 downto 0);    --Contador de saida do bloco
	  o_count_Centroid: out STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0); --Contador de saida do bloco
	  o_dado    	  : out STD_LOGIC_VECTOR (Palavra-1 downto 0);		   --Dado que sera salvo na memoria ram
      addr_Ram    	  : out STD_LOGIC_VECTOR (TamanhoAddr-1 downto 0); 	   --Endereço de escrita na memoria ram            
	  next_State      : out STD_LOGIC_VECTOR (NumBitsStates-1 downto 0)    --Proximo estado(bloco) a ser acessado na FMS
	 );
END Kmeans_MapInitialize;

ARCHITECTURE arch of Kmeans_MapInitialize is

--Sinais de dados 
SIGNAL s_countMap      : STD_LOGIC_VECTOR(MaxPontosBits-1 downto 0):= (others =>'0');
SIGNAL s_countCentroid : STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0):= (others =>'0');
SIGNAL s_addrRam       : STD_LOGIC_VECTOR (TamanhoAddr-1 downto 0) := (others =>'0');
SIGNAL s_dado    	   : STD_LOGIC_VECTOR (Palavra-1 downto 0) := (others =>'0');
--SIGNAL s_numPoints   : INTEGER := 0;
--SIGNAL s_numCentroids: INTEGER := 10;

BEGIN

	PROCESS(clk, nrst, en_MapInitialize, s_countCentroid, reg1)
	
	-- Valores iniciais para a geracao de numeros aleatorios
--	variable seed1, seed2: POSITIVE;
	-- Numero real aleatorio entre 0 e 1.0
	--  variable rand: REAL;
	-- Numero inteiro aleatorio com valores de 0..MaxCentroid
	--variable int_rand: INTEGER;
	
	--variable rand_temp : std_logic_vector(s_numCentroids-1 downto 0):=(s_numCentroids-1 => '1',others => '0');
	--variable temp : std_logic := '0';
	 	 
	BEGIN
	   if nrst='0' then
			s_countMap <= (others =>'0');
			s_countCentroid <= (others =>'0');
			next_State <= "0001";
			s_dado <= (others =>'0');
			s_addrRam <= (others =>'0');
			
		elsif clk'event and clk='1' and en_MapInitialize='1' then
		  
		  --Gera valores pseudo aleatorios
		  -- temp := rand_temp(s_numCentroids-1) xor rand_temp(s_numCentroids-2);
		  -- rand_temp(s_numCentroids-1 downto 1) := rand_temp(s_numCentroids-2 downto 0);
		  -- rand_temp(0) := temp;
			
			if (count_Map < reg3) then				
				--O mapeamento sera armazena na memoria ram no primeiro endereço disponivel
				--apos a inserçao dos centroids inicializados
				--addPosicao(posicao inicial de mapeamento + item do mapeamento) 
				s_addrRam <= std_logic_vector(to_unsigned(conv_integer(reg6) + conv_integer(count_Map),TamanhoAddr)); 
				
				--Funcao que inicializa o rand com valores entre 0 e 1
			--	UNIFORM(seed1, seed2, rand);
			--	int_rand := INTEGER(TRUNC(rand*real(3)));
			--	s_dado <= std_logic_vector(to_unsigned(int_rand, 32));
				
				s_countMap <= count_Map + 1; --Incrementa o contador				
				next_State <= "0100";	
				
				--Verifica qual sera o proximo centroid a ser definido
				if (s_countCentroid < (reg1-1)) then
					s_countCentroid <= s_countCentroid + 1;
				else 
					s_countCentroid <= (others =>'0');
				end if;	
							
			else			
				next_State <= "0101";				
			end if;
			
			s_dado <= std_logic_vector(resize(signed(s_countCentroid),Palavra));
		end if;
		
			
	END PROCESS;
	
o_dado           <= s_dado;
o_count_Map      <= s_countMap;
o_count_Centroid <= s_countCentroid;
addr_Ram         <= s_addrRam;

END arch;