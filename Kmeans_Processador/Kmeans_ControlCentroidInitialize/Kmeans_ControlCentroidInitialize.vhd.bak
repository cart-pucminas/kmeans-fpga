library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

Entity Kmeans_ControlCentroidInitialize is

	GENERIC (Palavra      : INTEGER := 64;
		     TamanhoAddr  : INTEGER := 15;
			 --MaxCentroid  : INTEGER := 1024;
			 MaxCentroidsBits : INTEGER := 10;
			 NumBitsStates: INTEGER := 4);
	
	PORT(
		clk  		      		        : in STD_LOGIC;
		nrst 			   		        : in STD_LOGIC;
		reg1                            : in STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0); 	--Numero de centroids
		count_Centroid                  : in STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0); 	--Numero de centroids inicializados
		en_ControlCentroidInitialize    : in STD_LOGIC;                                        --Habilita Inicializacao deste bloco
		next_State      		        : out STD_LOGIC_VECTOR(NumBitsStates-1 downto 0);      --Proximo estado(bloco) a ser acessado na FMS 
		o_countCentroid  		        : out STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0);   --Contador de centroid
		addr_Ram 				        : out STD_LOGIC_VECTOR (TamanhoAddr-1 downto 0)
	);

end Kmeans_ControlCentroidInitialize;

ARCHITECTURE arch OF Kmeans_ControlCentroidInitialize IS 

TYPE state_type is (RESET, IDLE, READDATA);
SIGNAL state, state_fut 	: state_type;
SIGNAL s_blockState      :  STD_LOGIC_VECTOR (NumBitsStates-1 downto 0) := "0010";
SIGNAL s_countCentroid	 :  STD_LOGIC_VECTOR(MaxCentroidsBits-1 downto 0) := (others => '0');--INTEGER range 0 to MaxCentroid := 0;
SIGNAL s_addrRam         :  STD_LOGIC_VECTOR (TamanhoAddr-1 downto 0) := (others => '0');
	
BEGIN
		--Caso seja o botao de nrst seja acionado o bloco sera resetado
		--Caso contrario sera verificado se o todos os centroids foram inicializados, se verdadeiro vai 
		--para o bloco 3, se falso solicita a inicializacao do proximo centroid
		PROCESS (clk, nrst)
		BEGIN
			if nrst = '0' then
				state <= RESET;
			elsif clk'event and clk='1' then
				state <= state_fut;	
			end if;
		END PROCESS;	
		
		
		PROCESS(clk, en_ControlCentroidInitialize)
		BEGIN
			if clk'event and clk='0' then
			    
				case state is
				when RESET =>	
					s_blockState <= "0010";
					s_countCentroid <= (others => '0');
					s_addrRam <= (others => '0');
					state_fut <= IDLE;
					
				when IDLE =>
					s_blockState <= "0010";
					s_countCentroid <= count_Centroid;					
					--O modo aleatorio será substituido pelo Round-robin
	                s_addrRam <= std_logic_vector(to_unsigned(conv_integer(s_countCentroid),TamanhoAddr));
					
					if en_ControlCentroidInitialize='1' then
						state_fut <= READDATA;						
					else
						state_fut <= IDLE;					
					end if;
					
				when READDATA =>
					s_countCentroid <= count_Centroid;
					
					if (s_countCentroid < reg1) then
						s_blockState <= "0011";
					else
						s_blockState <= "0100";
					end if;	
					
					--O modo aleatorio será substituido pelo Round-robin
	                s_addrRam <= std_logic_vector(to_unsigned(conv_integer(s_countCentroid),TamanhoAddr));
	                s_countCentroid <= (others => '0');
	                state_fut <= IDLE;
					
--				when ENDREAD =>
--					s_countCentroid <= count_Centroid;
--					s_addrRam <= (others => '0');
--					
--					
--					if (s_countCentroid < (reg1-1)) then
--						s_blockState <= "0011";
--					else
--						s_blockState <= "0100";
--					end if;	
					
				end case;
			end if;		
		END PROCESS;
--Ligacao dos sinais com os bis de saida
 o_countCentroid <= s_countCentroid;
 next_State      <= s_blockState;
 addr_Ram        <= s_addrRam;

END arch;		

		--Variaveis utilizadas para gera um numero aleatorio
--		variable rand_temp : std_logic_vector(TamanhoAddr-1 downto 0):=(TamanhoAddr-1 => '1',others => '0');
--	    variable temp : std_logic := '0';
		
--		BEGIN
--		   if nrst = '0' then
--				s_blockState <= "0010";
--				s_countCentroid <= (others => '0');
--				
--			elsif clk'event and clk='1' and en_ControlCentroidInitialize='1' then
----			  temp := rand_temp(TamanhoAddr-1) xor rand_temp(TamanhoAddr-2);
----		      rand_temp(TamanhoAddr-1 downto 1) := rand_temp(TamanhoAddr-2 downto 0);
----		      rand_temp(0) := temp;			
--
--				s_countCentroid <= count_Centroid;
--				
--				if (s_countCentroid < reg1-1) then
--					s_blockState <= "0011";
--				else
--					s_blockState <= "0100";
--				end if;				
--				
--				--O modo aleatorio será substituido pelo Round-robin
--	            s_addrRam <= std_logic_vector(to_unsigned(conv_integer(s_countCentroid),TamanhoAddr));
--				
--			end if;			
--		END PROCESS;
		

